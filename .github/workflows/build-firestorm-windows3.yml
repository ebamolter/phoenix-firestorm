name: Build Firestorm Windows (LibVLC, no package)

on:
  workflow_dispatch:
    inputs:
      branch_or_tag:
        description: 'Branch or tag'
        required: true
        default: '7.2.0_preview'
      enable_libvlc:
        description: 'Enable LibVLC'
        required: true
        default: 'true'
      libvlc_sdk_url:
        description: 'VLC SDK URL (.7z/.zip)'
        required: true
        default: 'https://download.videolan.org/pub/videolan/vlc/3.0.9.2/win64/vlc-3.0.9.2-win64.7z'

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_or_tag }}
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip deps (includes autobuild)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install autobuild

      - name: Expose Python scripts path to all shells
        shell: pwsh
        run: |
          echo "$env:pythonLocation\Scripts" >> $env:GITHUB_PATH
          echo "$env:pythonLocation" >> $env:GITHUB_PATH

      - name: Setup MSBuild (VS2022)
        uses: microsoft/setup-msbuild@v2

      - name: Fetch LibVLC SDK
        if: ${{ github.event.inputs.enable_libvlc == 'true' }}
        shell: pwsh
        run: |
          $url = "${{ github.event.inputs.libvlc_sdk_url }}"
          $dst = "$env:RUNNER_TEMP\libvlc_pkg"
          $zip = "$dst\pkg"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          $fname = "$dst\$(Split-Path $url -Leaf)"
          Invoke-WebRequest -Uri $url -OutFile $fname -UseBasicParsing
          if ($fname.ToLower().EndsWith(".7z")) {
            & "C:\Program Files\7-Zip\7z.exe" x $fname "-o$zip" -y | Out-Null
          } else {
            Expand-Archive -Path $fname -DestinationPath $zip -Force
          }
          $inc = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and (Test-Path (Join-Path $_.FullName "vlc\vlc.h"))
          } | Select-Object -First 1
          $libdir = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and (Test-Path (Join-Path $_.FullName "libvlc.lib")) -and (Test-Path (Join-Path $_.FullName "libvlccore.lib"))
          } | Select-Object -First 1
          $dlldir = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and ((Get-ChildItem -Path $_.FullName -Filter "libvlc.dll" -ErrorAction SilentlyContinue).Count -gt 0)
          } | Select-Object -First 1
          if ($inc -and $libdir) {
            "LIBVLC_INCLUDE_DIR=$($inc.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
            "LIBVLC_LIB_DIR=$($libdir.FullName)"   | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            "LIBVLC_DETECTED=0" | Out-File -FilePath $env:GITHUB_ENV -Append
          }
          if ($dlldir) {
            $dl = $dlldir.FullName
            $dl | Out-File -FilePath $env:GITHUB_PATH -Append
          }

      - name: Set build env vars
        shell: pwsh
        run: |
          "LL_BUILD=windows" | Out-File -FilePath $env:GITHUB_ENV -Append
          "AUTOBUILD_VSVER=170" | Out-File -FilePath $env:GITHUB_ENV -Append
          # Firestorm repo ships autobuild.xml at repo root
          "AUTOBUILD_VARIABLES_FILE=${{ github.workspace }}\autobuild.xml" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Debug workspace
        shell: pwsh
        run: |
          "WS=$env:GITHUB_WORKSPACE"
          if (Test-Path "$env:GITHUB_WORKSPACE\indra\CMakeLists.txt") {
            "FOUND indra/CMakeLists.txt"
          } else {
            "MISSING indra/CMakeLists.txt"
            Get-ChildItem -Recurse -Filter CMakeLists.txt $env:GITHUB_WORKSPACE | % { $_.FullName }
          }

      - name: Configure (via script)
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -x
          if [[ "${{ github.event.inputs.enable_libvlc }}" == "true" && "${LIBVLC_DETECTED:-1}" != "0" ]]; then
            ./indra/scripts/configure_firestorm.sh --platform windows -- -G "Visual Studio 17 2022" -A x64 \
              -DLL_TESTS:BOOL=FALSE \
              -DPACKAGE:BOOL=Off \
              -DMEDIAPLUGIN_LIBVLC:BOOL=ON \
              -DUSE_VLC:BOOL=ON \
              "-DLibVLC_INCLUDE_DIR=$LIBVLC_INCLUDE_DIR" \
              "-DLibVLC_LIBRARY=$LIBVLC_LIB_DIR/libvlc.lib" \
              "-DLibVLC_CORE_LIBRARY=$LIBVLC_LIB_DIR/libvlccore.lib"
          else
            ./indra/scripts/configure_firestorm.sh --platform windows -- -G "Visual Studio 17 2022" -A x64 \
              -DLL_TESTS:BOOL=FALSE \
              -DPACKAGE:BOOL=Off \
              -DMEDIAPLUGIN_LIBVLC:BOOL=OFF \
              -DUSE_VLC:BOOL=OFF
          fi

      - name: Ensure solution exists (fallback cmake)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          if (Test-Path "build-vc170-64\Firestorm.sln") {
            "✅ Firestorm.sln found."
          } else {
            "❌ Firestorm.sln NOT found. Generating..."
            cmake -S "${{ github.workspace }}\indra" -B "${{ github.workspace }}\build-vc170-64" -G "Visual Studio 17 2022" -A x64
          }

      - name: Build
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          msbuild build-vc170-64\Firestorm.sln /p:Configuration=Release /m /v:m /clp:ErrorsOnly;Summary

      - name: Upload unpackaged viewer
        uses: actions/upload-artifact@v4
        with:
          name: firestorm-windows-unpackaged
          path: build-vc*-64/newview/Release
