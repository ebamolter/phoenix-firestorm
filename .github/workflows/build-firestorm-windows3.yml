name: Build Firestorm Windows (LibVLC, no package)

on:
  workflow_dispatch:
    inputs:
      branch_or_tag:
        description: 'Branch or tag (例: master または Firestorm_7.1.13)'
        required: true
        default: '7.2.0_preview'
      enable_libvlc:
        description: 'LibVLCを有効化する'
        required: true
        default: 'true'
      libvlc_sdk_url:
        description: 'VLC SDK URL (.7z/.zip, includes vlc.h & libvlc.lib)'
        required: true
        default: 'https://download.videolan.org/pub/videolan/vlc/3.0.9.2/win64/vlc-3.0.9.2-win64.7z'

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch_or_tag }}
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Clone fs-build-variables
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:USERPROFILE/src" | Out-Null
          Set-Location "$env:USERPROFILE/src"
          git clone https://github.com/FirestormViewer/fs-build-variables.git

      - name: Set Autobuild Env
        shell: pwsh
        run: |
          echo "AUTOBUILD_VARIABLES_FILE=$env:USERPROFILE/src/fs-build-variables/variables" >> $env:GITHUB_ENV
          echo "AUTOBUILD_BUILD_ID=${{ github.run_id }}-${{ github.run_attempt }}" >> $env:GITHUB_ENV

      - name: Install Autobuild And Requirements
        shell: pwsh
        run: |
          python -m pip install -r requirements.txt
          autobuild --version
          cmake --version

      - name: Fetch LibVLC SDK
        if: ${{ github.event.inputs.enable_libvlc == 'true' }}
        shell: pwsh
        run: |
          $url = "${{ github.event.inputs.libvlc_sdk_url }}"
          $dst = "$env:RUNNER_TEMP/libvlc_pkg"
          $zip = "$dst/pkg"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          $fname = "$dst/$(Split-Path $url -Leaf)"
          Invoke-WebRequest -Uri $url -OutFile $fname -UseBasicParsing

          if ($fname.ToLower().EndsWith(".7z")) {
            & "C:/Program Files/7-Zip/7z.exe" x $fname "-o$zip" -y | Out-Null
          } else {
            Expand-Archive -Path $fname -DestinationPath $zip -Force
          }

          $inc = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and (Test-Path (Join-Path $_.FullName "vlc/vlc.h"))
          } | Select-Object -First 1

          $libdir = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and (Test-Path (Join-Path $_.FullName "libvlc.lib")) -and (Test-Path (Join-Path $_.FullName "libvlccore.lib"))
          } | Select-Object -First 1

          $dlldir = Get-ChildItem -Recurse -Path $zip | Where-Object {
            $_.PSIsContainer -and ((Get-ChildItem -Path $_.FullName -Filter "libvlc.dll" -ErrorAction SilentlyContinue).Count -gt 0)
          } | Select-Object -First 1

          if ($inc -and $libdir) {
            echo "LIBVLC_INCLUDE_DIR=$($inc.FullName)" >> $env:GITHUB_ENV
            echo "LIBVLC_LIB_DIR=$($libdir.FullName)" >> $env:GITHUB_ENV
          } else {
            echo "LIBVLC_DETECTED=0" >> $env:GITHUB_ENV
          }

          if ($dlldir) {
            echo $dlldir.FullName >> $env:GITHUB_PATH
          }

      - name: Show Workspace Structure
        shell: pwsh
        run: |
          Write-Output "WS: $env:GITHUB_WORKSPACE"
          if (Test-Path "$env:GITHUB_WORKSPACE/indra/CMakeLists.txt") {
            Write-Output "FOUND: indra/CMakeLists.txt"
          } else {
            Write-Output "MISSING: indra/CMakeLists.txt, searching..."
            Get-ChildItem -Recurse -Filter CMakeLists.txt $env:GITHUB_WORKSPACE | ForEach-Object { $_.FullName }
          }
          Write-Output "Top level:"
          Get-ChildItem -Force $env:GITHUB_WORKSPACE

      - name: Configure With Script
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -x
          if [[ "$LIBVLC_DETECTED" != "0" ]]; then
            ./indra/scripts/configure_firestorm.sh -A 64 -c ReleaseFS_open -- \
              -DLL_TESTS:BOOL=FALSE \
              -DPACKAGE:BOOL=Off \
              -DMEDIAPLUGIN_LIBVLC:BOOL=ON \
              -DUSE_VLC:BOOL=ON \
              "-DLibVLC_INCLUDE_DIR=$LIBVLC_INCLUDE_DIR" \
              "-DLibVLC_LIBRARY=$LIBVLC_LIB_DIR/libvlc.lib" \
              "-DLibVLC_CORE_LIBRARY=$LIBVLC_LIB_DIR/libvlccore.lib"
          else
            ./indra/scripts/configure_firestorm.sh -A 64 -c ReleaseFS_open -- \
              -DLL_TESTS:BOOL=FALSE \
              -DPACKAGE:BOOL=Off \
              -DMEDIAPLUGIN_LIBVLC:BOOL=OFF \
              -DUSE_VLC:BOOL=OFF
          fi

      - name: Ensure Solution Or Generate
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          if (Test-Path "build-vc170-64/Firestorm.sln") {
            Write-Output "✅ Firestorm.sln found."
          } else {
            Write-Output "❌ Firestorm.sln NOT found, generating with cmake (source = indra)..."
            cmake -S "${{ github.workspace }}/indra" -B "${{ github.workspace }}/build-vc170-64" -G "Visual Studio 17 2022" -A x64
          }

      - name: List Solution Files
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          Get-ChildItem -Path . -Recurse -Filter *.sln | ForEach-Object { $_.FullName }

      - name: Build
        shell: pwsh
        run: |
          autobuild build -A 64 -c ReleaseFS_open --no-configure -- /m:1 /v:m "/clp:ErrorsOnly;Summary"

      - name: Upload Unpackaged Viewer
        uses: actions/upload-artifact@v4
        with:
          name: firestorm-windows-unpackaged
          path: build-vc*-64/newview/Release
